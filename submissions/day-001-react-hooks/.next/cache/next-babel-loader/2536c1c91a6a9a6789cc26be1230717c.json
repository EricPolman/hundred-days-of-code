{"ast":null,"code":"var _jsxFileName = \"/Users/ericpolman/git/pp/hundred-days-of-code/submissions/day-001-react-hooks/src/image-change-on-scroll.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageChangeOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(isInView);\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? primaryImg : secondaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default ImageChangeOnScroll;","map":{"version":3,"sources":["/Users/ericpolman/git/pp/hundred-days-of-code/submissions/day-001-react-hooks/src/image-change-on-scroll.tsx"],"names":["React","useRef","useEffect","useState","ImageChangeOnScroll","primaryImg","secondaryImg","imageRef","inView","setInView","window","addEventListener","scrollHandler","removeEventListener","isInView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAOA,MAAMC,mBAAmB,GAAG,CAAC;AAC3BC,EAAAA,UAD2B;AAE3BC,EAAAA;AAF2B,CAAD,KAGF;AACxB,QAAMC,QAAQ,GAAGN,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GALQ,CAAT;;AAOA,QAAME,QAAQ,GAAG,MAAM;AACrB,QAAIP,QAAQ,CAACQ,OAAb,EAAsB;AACpB,YAAMC,IAAI,GAAGT,QAAQ,CAACQ,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeT,MAAM,CAACU,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,QAAMR,aAAa,GAAG,MAAM;AAC1BH,IAAAA,SAAS,CAACK,QAAD,CAAT;AACD,GAFD;;AAIA,SAAO;AAAK,IAAA,GAAG,EAAEN,MAAM,GAAGH,UAAH,GAAgBC,YAAhC;AAA8C,IAAA,GAAG,EAAC,EAAlD;AAAqD,IAAA,GAAG,EAAEC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA3BD;;AA6BA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\ntype Props = {\n  primaryImg: string;\n  secondaryImg: string;\n};\n\nconst ImageChangeOnScroll = ({\n  primaryImg,\n  secondaryImg,\n}: Props): JSX.Element => {\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [inView, setInView] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(isInView);\n  };\n\n  return <img src={inView ? primaryImg : secondaryImg} alt=\"\" ref={imageRef} />;\n};\n\nexport default ImageChangeOnScroll;\n"]},"metadata":{},"sourceType":"module"}