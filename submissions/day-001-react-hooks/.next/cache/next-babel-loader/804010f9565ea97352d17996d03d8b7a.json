{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/ericpolman/git/pp/hundred-days-of-code/submissions/day-001-react-hooks/src/image-change-on-scroll.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nvar ImageChangeOnScroll = function ImageChangeOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(false),\n      inView = _useState[0],\n      setInView = _useState[1];\n\n  var _useState2 = useState(true),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1];\n\n  useEffect(function () {\n    setInView(isInView());\n    setisLoading(false);\n    window.addEventListener(\"scroll\", scrollHandler);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    return setInView(isInView);\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    width: 200,\n    height: 200,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ImageChangeOnScroll;","map":{"version":3,"sources":["/Users/ericpolman/git/pp/hundred-days-of-code/submissions/day-001-react-hooks/src/image-change-on-scroll.tsx"],"names":["React","useRef","useEffect","useState","ImageChangeOnScroll","primaryImg","secondaryImg","imageRef","inView","setInView","isLoading","setisLoading","isInView","window","addEventListener","scrollHandler","removeEventListener","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAOA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAGK;AAAA,MAF/BC,UAE+B,QAF/BA,UAE+B;AAAA,MAD/BC,YAC+B,QAD/BA,YAC+B;AAC/B,MAAMC,QAAQ,GAAGN,MAAM,CAAmB,IAAnB,CAAvB;;AAD+B,kBAEHE,QAAQ,CAAC,KAAD,CAFL;AAAA,MAExBK,MAFwB;AAAA,MAEhBC,SAFgB;;AAAA,mBAGGN,QAAQ,CAAC,IAAD,CAHX;AAAA,MAGxBO,SAHwB;AAAA,MAGbC,YAHa;;AAK/BT,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS,CAACG,QAAQ,EAAT,CAAT;AACAD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,YAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GAPQ,EAON,CAACL,SAAD,CAPM,CAAT;;AASA,MAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIL,QAAQ,CAACU,OAAb,EAAsB;AACpB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeR,MAAM,CAACS,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,MAAMP,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMN,SAAS,CAACG,QAAD,CAAf;AAAA,GAAtB;;AAEA,SAAOF,SAAS,GAAG,IAAH,GACd;AACE,IAAA,GAAG,EAAEF,MAAM,GAAGF,YAAH,GAAkBD,UAD/B;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEE,QAHP;AAIE,IAAA,KAAK,EAAE,GAJT;AAKE,IAAA,MAAM,EAAE,GALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CApCD;;AAsCA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\ntype Props = {\n  primaryImg: string;\n  secondaryImg: string;\n};\n\nconst ImageChangeOnScroll = ({\n  primaryImg,\n  secondaryImg,\n}: Props): JSX.Element | null => {\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [inView, setInView] = useState(false);\n  const [isLoading, setisLoading] = useState(true);\n\n  useEffect(() => {\n    setInView(isInView());\n    setisLoading(false);\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => setInView(isInView);\n\n  return isLoading ? null : (\n    <img\n      src={inView ? secondaryImg : primaryImg}\n      alt=\"\"\n      ref={imageRef}\n      width={200}\n      height={200}\n    />\n  );\n};\n\nexport default ImageChangeOnScroll;\n"]},"metadata":{},"sourceType":"module"}