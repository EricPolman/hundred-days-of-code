{"version":3,"file":"static/webpack/static/development/pages/img-change.js.0c40c4b23a70706618c0.hot-update.js","sources":["webpack:///./pages/img-change.tsx","webpack:///./src/image-change-on-scroll.tsx"],"sourcesContent":["import React from \"react\";\nimport ImageChangeOnMouseover from \"../src/image-change-on-mouseover\";\nimport ImageChangeOnScroll from \"../src/image-change-on-scroll\";\n\nconst ImageChange = (): JSX.Element => {\n  return (\n    <div>\n      <ImageChangeOnScroll\n        primaryImg=\"/static/speakers/bw/Speaker-187.jpg\"\n        secondaryImg=\"/static/speakers/Speaker-187.jpg\"\n      />\n      &nbsp;&nbsp;&nbsp;\n      <ImageChangeOnScroll\n        primaryImg=\"/static/speakers/bw/Speaker-1124.jpg\"\n        secondaryImg=\"/static/speakers/Speaker-1124.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default ImageChange;\n","import React, { useRef, useEffect, useState } from \"react\";\n\ntype Props = {\n  primaryImg: string;\n  secondaryImg: string;\n};\n\nconst ImageChangeOnScroll = ({\n  primaryImg,\n  secondaryImg,\n}: Props): JSX.Element => {\n  const imageRef = useRef<HTMLImageElement>(null);\n  const [inView, setInView] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(isInView);\n  };\n\n  return <img src={inView ? primaryImg : secondaryImg} alt=\"\" ref={imageRef} />;\n};\n\nexport default ImageChangeOnScroll;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AAMA;AAGA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}