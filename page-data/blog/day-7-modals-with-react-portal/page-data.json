{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/day-7-modals-with-react-portal","result":{"data":{"markdownRemark":{"html":"<h1>Day 7: Modals with React Portal</h1>\n<h2>Introduction</h2>\n<p>Most web apps use modals or popups in some way. Asking the user for confirmation when they are pressing a delete button ensures they actually want to execute such a destructive action. The problem that arises when you want to show a full-screen popup in React is where the popup should live in the DOM.</p>\n<p>Let's say you have a table with some rows containing users of an application. If you want to add the option to delete a user, you can add a trash bin or archive icon button in a column in that table. When the user presses this button you need to show a popup that covers the whole screen (perhaps with an overlay).</p>\n<p>You can hack together a <code>div</code> that is absolute-positioned over the screen with a semi-transparent black background color and add your modal to that, with a high enough z-index to prevent issues with elements being rendered on top of the overlay, but you'll have to do that for every place you require a modal. This pollutes the DOM and makes no sense.</p>\n<p>React introduced a solution to this problem called <a href=\"https://reactjs.org/docs/portals.html\">Portals</a>. Portals allow you to render a component outside the DOM hierarchy of the parent component. This means that besides a <code>&#x3C;div id=\"app-root\">&#x3C;/div></code> in which the React app is rendered we can add another element (<code>&#x3C;div id=\"modal-root\">&#x3C;/div></code>) to the DOM and render React components inside that as well.</p>\n<p>Today I'll explore some basic modal rendering using React Portals and Bootstrap.</p>\n<h2>Result</h2>\n<p>The demo allows you to render a modal using either the Portal or just a containing div. The result for the user is the same here, but the DOM is different. When the Portal is used, you can see that the <code>#modal-root</code> node is filled instead of it being inserted next to the nodes in App.tsx.</p>\n<p>I haven't found a great way to demonstrate the z-indexing issues you might face with a modal that is nested deep in your application, but diving further into portals I did find this cool tutorial / demo: <a href=\"https://medium.com/hackernoon/using-a-react-16-portal-to-do-something-cool-2a2d627b0202\">https://medium.com/hackernoon/using-a-react-16-portal-to-do-something-cool-2a2d627b0202</a>. So, not only can you render your content in another DOM node while maintaining context, you can even render it in another window!</p>","fileAbsolutePath":"/Users/ericpolman/git/pp/thirty-days-of-code/submissions/day-007-modals-with-react-portal/README.md","frontmatter":{"date":"May 07, 2020","path":"/blog/day-7-modals-with-react-portal","title":"Day 7: Modals with React Portal"}}},"pageContext":{}}}